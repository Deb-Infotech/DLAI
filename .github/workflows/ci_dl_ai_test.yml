# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: DL AI CI Test Execution

on:
  #  workflow_dispatch: # Manual Execution From GitHub Actions
  # Enable below push if automated execution required
  push:
    #    branches: [ "master" ] " Applicable on all branches
    branches-ignore: [ "temp*" ]

  pull_request:
    branches: [ "master", "develop" ]

permissions:
  contents: write
  pages: write
  checks: write
  id-token: write

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Create Virtual Environment
        run: |
          echo "Creating virtual environment..."
          pip install virtualenv
          echo "Ran: pip install virtualenv"
          python -m venv venv
          echo "Ran: python -m venv venv"
          source venv/bin/activate

      - name: Install dependencies In Virtual Environment
        run: |
          source venv/bin/activate
          echo "Ran: source venv/bin/activate"
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8

      - name: Linting Coding Best Practices With flake8
        run: |
          source venv/bin/activate
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --exclude=venv --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --exclude=venv --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Execute Tests with pytest
        run: |
          source venv/bin/activate
          pytest

      - name: Archive JUnit And PyTest HTML Test Result
        uses: actions/upload-artifact@v4
        with:
          name: JUnit And PyTest HTML Test Result
          path: |
            junit/
            reports/

      - name: Publish PyTest Junit Style Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: PyTest JUnit Style Report
          path: junit/report.xml
          reporter: java-junit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./reports

      - name: Add html report link to summary
        uses: actions/github-script@v6
        with:
          script: |
            const owner = process.env.GITHUB_REPOSITORY_OWNER;
            const repo = process.env.GITHUB_REPOSITORY.split('/')[1];
            const html_reportUrl = `https://${owner}.github.io/${repo}/report.html`;
            const dashboard_reportUrl = `https://${owner}.github.io/${repo}/report_dashboard.html`;
            core.summary
              .addHeading('PyTest HTML Report')
              .addLink('View PyTest HTML Report', html_reportUrl)
              .addLink('View PyTest HTML Dashboard Report', html_reportUrl)
              .write();
      

         
        





